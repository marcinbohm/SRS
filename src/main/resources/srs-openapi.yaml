openapi: "3.0.3"
info:
  title: "srs API"
  description: "srs API"
  version: "1.0.0"
servers:
  - url: "https://srs"
paths:
  /cells:
    get:
      summary: "GET cells"
      operationId: "getAllCells"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CellDTO"
  /cells/add:
    post:
      summary: "POST cells/add"
      operationId: "addCell"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CellDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /cells/delete/{id}:
    delete:
      summary: "DELETE cells/delete/{id}"
      operationId: "deleteCell"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /cells/filter:
    get:
      summary: "GET cells/filter"
      operationId: "getCellsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CellFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CellDTO"
  /cells/update:
    put:
      summary: "PUT cells/update"
      operationId: "updateCell"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CellDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /departments:
    get:
      summary: "GET departments"
      operationId: "getAllDepartments"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DepartmentDTO"
  /departments/add:
    post:
      summary: "POST departments/add"
      operationId: "addDepartment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /departments/delete/{id}:
    delete:
      summary: "DELETE departments/delete/{id}"
      operationId: "deleteDepartment"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /departments/filter:
    get:
      summary: "GET departments/filter"
      operationId: "getDepartmentsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DepartmentDTO"
  /departments/update:
    put:
      summary: "PUT departments/update"
      operationId: "updateDepartment"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /permissions:
    get:
      summary: "GET permissions"
      operationId: "getAllPermissions"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PermissionDTO"
  /permissions/add:
    post:
      summary: "POST permissions/add"
      operationId: "addPermission"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /permissions/delete/{id}:
    delete:
      summary: "DELETE permissions/delete/{id}"
      operationId: "deletePermission"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /permissions/filter:
    get:
      summary: "GET permissions/filter"
      operationId: "getPermissionsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PermissionDTO"
  /permissions/update:
    put:
      summary: "PUT permissions/update"
      operationId: "updatePermission"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /priorities:
    get:
      summary: "GET priorities"
      operationId: "getAllPriorities"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PriorityDTO"
  /priorities/add:
    post:
      summary: "POST priorities/add"
      operationId: "addPriority"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriorityDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /priorities/delete/{id}:
    delete:
      summary: "DELETE priorities/delete/{id}"
      operationId: "deletePriority"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /priorities/filter:
    get:
      summary: "GET priorities/filter"
      operationId: "getPrioritiesByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriorityFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PriorityDTO"
  /priorities/update:
    put:
      summary: "PUT priorities/update"
      operationId: "updatePriority"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PriorityDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisons:
    get:
      summary: "GET prisons"
      operationId: "getAllPrisons"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PrisonDTO"
  /prisons/add:
    post:
      summary: "POST prisons/add"
      operationId: "addPrison"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisons/delete/{id}:
    delete:
      summary: "DELETE prisons/delete/{id}"
      operationId: "deletePrison"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisons/filter:
    get:
      summary: "GET prisons/filter"
      operationId: "getPrisonsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PrisonDTO"
  /prisons/update:
    put:
      summary: "PUT prisons/update"
      operationId: "updatePrison"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisoners:
    get:
      summary: "GET prisoners"
      operationId: "getAllPrisoners"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PrisonerDTO"
  /prisoners/add:
    post:
      summary: "POST prisoners/add"
      operationId: "addPrisoner"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonerDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisoners/delete/{id}:
    delete:
      summary: "DELETE prisoners/delete/{id}"
      operationId: "deletePrisoner"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /prisoners/filter:
    get:
      summary: "GET prisoners/filter"
      operationId: "getPrisonersByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonerFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PrisonerDTO"
  /prisoners/update:
    put:
      summary: "PUT prisoners/update"
      operationId: "updatePrisoner"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrisonerDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /reports:
    get:
      summary: "GET reports"
      operationId: "getAllReports"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReportDTO"
  /reports/add:
    post:
      summary: "POST reports/add"
      operationId: "addReport"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /reports/delete/{id}:
    delete:
      summary: "DELETE reports/delete/{id}"
      operationId: "deleteReport"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /reports/filter:
    get:
      summary: "GET reports/filter"
      operationId: "getReportsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReportDTO"
  /reports/update:
    put:
      summary: "PUT reports/update"
      operationId: "updateReport"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /roles:
    get:
      summary: "GET roles"
      operationId: "getAllRoles"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RoleDTO"
  /roles/add:
    post:
      summary: "POST roles/add"
      operationId: "addRole"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /roles/delete/{id}:
    delete:
      summary: "DELETE roles/delete/{id}"
      operationId: "deleteRole"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /roles/filter:
    get:
      summary: "GET roles/filter"
      operationId: "getRolesByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RoleDTO"
  /roles/update:
    put:
      summary: "PUT roles/update"
      operationId: "updateRole"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /sentences:
    get:
      summary: "GET sentences"
      operationId: "getAllSentences"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SentenceDTO"
  /sentences/add:
    post:
      summary: "POST sentences/add"
      operationId: "addSentence"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SentenceDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /sentences/delete/{id}:
    delete:
      summary: "DELETE sentences/delete/{id}"
      operationId: "deleteSentence"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /sentences/filter:
    get:
      summary: "GET sentences/filter"
      operationId: "getSentencesByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SentenceFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SentenceDTO"
  /sentences/update:
    put:
      summary: "PUT sentences/update"
      operationId: "updateSentence"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SentenceDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /shifts:
    get:
      summary: "GET shifts"
      operationId: "getAllShifts"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ShiftDTO"
  /shifts/add:
    post:
      summary: "POST shifts/add"
      operationId: "addShift"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShiftDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /shifts/delete/{id}:
    delete:
      summary: "DELETE shifts/delete/{id}"
      operationId: "deleteShift"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /shifts/filter:
    get:
      summary: "GET shifts/filter"
      operationId: "getShiftsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShiftFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ShiftDTO"
  /shifts/update:
    put:
      summary: "PUT shifts/update"
      operationId: "updateShift"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShiftDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /ping:
    get:
      summary: "GET ping"
      operationId: "ping"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /applications:
    get:
      summary: "GET applications"
      operationId: "getAllApplications"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ApplicationDTO"
  /applications/add:
    post:
      summary: "POST applications/add"
      operationId: "addApplication"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /applications/delete/{id}:
    delete:
      summary: "DELETE applications/delete/{id}"
      operationId: "deleteApplication"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /applications/filter:
    get:
      summary: "GET applications/filter"
      operationId: "getApplicationsByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ApplicationDTO"
  /applications/update:
    put:
      summary: "PUT applications/update"
      operationId: "updateApplication"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /applicationTypes:
    get:
      summary: "GET applicationTypes"
      operationId: "getAllApplicationTypes"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ApplicationTypeDTO"
  /applicationTypes/add:
    post:
      summary: "POST applicationTypes/add"
      operationId: "addApplicationType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationTypeDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /applicationTypes/delete/{id}:
    delete:
      summary: "DELETE applicationTypes/delete/{id}"
      operationId: "deleteApplicationType"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /applicationTypes/filter:
    get:
      summary: "GET applicationTypes/filter"
      operationId: "getApplicationTypesByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationTypeFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ApplicationTypeDTO"
  /applicationTypes/update:
    put:
      summary: "PUT applicationTypes/update"
      operationId: "updateApplicationType"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationTypeDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /auth/currentUser:
    get:
      summary: "GET auth/currentUser"
      operationId: "getCurrentUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CurrentUser"
  /auth/loginUser:
    post:
      summary: "POST auth/loginUser"
      operationId: "loginUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthSession"
  /auth/logoutUser:
    post:
      summary: "POST auth/logoutUser"
      operationId: "logoutUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SuccessPayload"
  /auth/refreshToken:
    post:
      summary: "POST auth/refreshToken"
      operationId: "refreshToken"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthSession"
  /auth/sign-up:
    post:
      summary: "POST auth/sign-up"
      operationId: "registration"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /categories:
    get:
      summary: "GET categories"
      operationId: "getAllCategories"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /categories/add:
    post:
      summary: "POST categories/add"
      operationId: "addCategory"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /categories/delete/{id}:
    delete:
      summary: "DELETE categories/delete/{id}"
      operationId: "deleteCategory"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
  /categories/filter:
    get:
      summary: "GET categories/filter"
      operationId: "getCategoriesByFilter"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryFilter"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /categories/update:
    put:
      summary: "PUT categories/update"
      operationId: "updateCategory"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OperationStatus"
components:
  schemas:
    CellDTO:
      type: "object"
      properties:
        cellId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        segment:
          type: "string"
        blok:
          type: "string"
        assignDate:
          type: "string"
          format: "date"
        unassignDate:
          type: "string"
          format: "date"
    Category:
      type: "object"
      properties:
        categoryId:
          type: "integer"
          format: "int32"
        code:
          type: "string"
        description:
          type: "string"
        helpDescription:
          type: "string"
        categoryPermissionsList:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
    Permission:
      type: "object"
      properties:
        permissionId:
          type: "integer"
          format: "int32"
        categoryId:
          type: "integer"
          format: "int32"
        allowRead:
          type: "boolean"
        allowAdd:
          type: "boolean"
        allowModify:
          type: "boolean"
        allowDelete:
          type: "boolean"
        classId:
          type: "integer"
          format: "int32"
        category:
          $ref: "#/components/schemas/Category"
    Role:
      type: "object"
      properties:
        roleId:
          type: "integer"
          format: "int32"
        roleCode:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        adminClass:
          type: "boolean"
        active:
          type: "boolean"
        classPermissionList:
          type: "array"
          items:
            $ref: "#/components/schemas/Permission"
        roleUserSet:
          type: "array"
          items:
            $ref: "#/components/schemas/User"
    Session:
      type: "object"
      properties:
        sessionId:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        ticket:
          type: "string"
        lastActive:
          type: "string"
          format: "date-time"
        refreshTicket:
          type: "string"
        user:
          $ref: "#/components/schemas/User"
    Shift:
      type: "object"
      properties:
        shiftId:
          type: "integer"
          format: "int32"
        startDate:
          type: "string"
          format: "date-time"
        endDate:
          type: "string"
          format: "date-time"
        shiftUserSet:
          type: "array"
          items:
            $ref: "#/components/schemas/User"
    Department:
      type: "object"
      properties:
        departmentId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
    User:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        firstname:
          type: "string"
        lastname:
          type: "string"
        login:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        active:
          type: "boolean"
        blocked:
          type: "boolean"
        expireAccountDate:
          type: "string"
          format: "date"
        expirePasswordDate:
          type: "string"
          format: "date"
        lastLoginTime:
          type: "string"
          format: "date-time"
        createdAt:
          type: "string"
          format: "date-time"
        createdBy:
          type: "integer"
          format: "int32"
        updatedAt:
          type: "string"
          format: "date-time"
        updatedBy:
          type: "integer"
          format: "int32"
        userType:
          type: "integer"
          format: "int32"
        supervisorId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        gender:
          type: "string"
        birthDate:
          type: "string"
          format: "date"
        pesel:
          type: "string"
        cardStatus:
          type: "string"
        departmentId:
          type: "integer"
          format: "int32"
        userRoleSet:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
        userSessionsList:
          type: "array"
          items:
            $ref: "#/components/schemas/Session"
        userShiftSet:
          type: "array"
          items:
            $ref: "#/components/schemas/Shift"
        userApplicationList:
          type: "array"
          items:
            $ref: "#/components/schemas/Application"
        department:
          $ref: "#/components/schemas/Department"
    ApplicationType:
      type: "object"
      properties:
        applicationTypeId:
          type: "integer"
          format: "int32"
        description:
          type: "string"
        name:
          type: "string"
        typeOfApplicationApplicationList:
          type: "array"
          items:
            $ref: "#/components/schemas/Application"
    Application:
      type: "object"
      properties:
        applicationId:
          type: "integer"
          format: "int32"
        prisonerId:
          type: "integer"
          format: "int32"
        additionalInformation:
          type: "string"
        typeOfApplication:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        applyDate:
          type: "string"
          format: "date"
        reviewDate:
          type: "string"
          format: "date"
        prisoner:
          $ref: "#/components/schemas/Prisoner"
        user:
          $ref: "#/components/schemas/User"
        applicationType:
          $ref: "#/components/schemas/ApplicationType"
    Prisoner:
      type: "object"
      properties:
        prisonerId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        surname:
          type: "string"
        pesel:
          type: "string"
        kartaPobytuId:
          type: "string"
        passportId:
          type: "string"
        prisonerApplicationList:
          type: "array"
          items:
            $ref: "#/components/schemas/Application"
    Sentence:
      type: "object"
      properties:
        sentenceId:
          type: "integer"
          format: "int32"
        prisonerId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        startDate:
          type: "string"
          format: "date"
        endDate:
          type: "string"
          format: "date"
        assignDate:
          type: "string"
          format: "date"
        unassignDate:
          type: "string"
          format: "date"
        prison:
          $ref: "#/components/schemas/Prison"
        prisoner:
          $ref: "#/components/schemas/Prisoner"
        sentenceCellSet:
          type: "array"
          items:
            $ref: "#/components/schemas/Cell"
    Priority:
      type: "object"
      properties:
        priorityId:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        description:
          type: "string"
        priorityReportList:
          type: "array"
          items:
            $ref: "#/components/schemas/Report"
    Report:
      type: "object"
      properties:
        reportId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        priorityId:
          type: "integer"
          format: "int32"
        shiftId:
          type: "integer"
          format: "int32"
        segment:
          type: "string"
        blok:
          type: "string"
        description:
          type: "string"
        prison:
          $ref: "#/components/schemas/Prison"
        priority:
          $ref: "#/components/schemas/Priority"
    Prison:
      type: "object"
      properties:
        prisonId:
          type: "integer"
          format: "int32"
        voivodeship:
          type: "string"
        city:
          type: "string"
        postalCode:
          type: "string"
        street:
          type: "string"
        prisonSentenceList:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
        prisonCellList:
          type: "array"
          items:
            $ref: "#/components/schemas/Cell"
        prisonReportList:
          type: "array"
          items:
            $ref: "#/components/schemas/Report"
    Cell:
      type: "object"
      properties:
        cellId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        segment:
          type: "string"
        blok:
          type: "string"
        assignDate:
          type: "string"
          format: "date"
        unassignDate:
          type: "string"
          format: "date"
        prison:
          $ref: "#/components/schemas/Prison"
        cellSentenceSet:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
    OperationStatus:
      type: "object"
      properties:
        targetClassName:
          type: "string"
        recordId:
          type: "integer"
          format: "int32"
        operationName:
          type: "string"
        success:
          type: "boolean"
        msgList:
          type: "array"
          items:
            type: "string"
    CellFilter:
      type: "object"
      properties: { }
    DepartmentDTO:
      type: "object"
      properties:
        departmentId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
    DepartmentFilter:
      type: "object"
      properties: { }
    PermissionDTO:
      type: "object"
      properties:
        permissionId:
          type: "integer"
          format: "int32"
        categoryId:
          type: "integer"
          format: "int32"
        allowRead:
          type: "boolean"
        allowAdd:
          type: "boolean"
        allowModify:
          type: "boolean"
        allowDelete:
          type: "boolean"
        classId:
          type: "integer"
          format: "int32"
    PermissionFilter:
      type: "object"
      properties: { }
    PriorityDTO:
      type: "object"
      properties:
        priorityId:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        description:
          type: "string"
    PriorityFilter:
      type: "object"
      properties: { }
    PrisonDTO:
      type: "object"
      properties: { }
    PrisonFilter:
      type: "object"
      properties: { }
    PrisonerDTO:
      type: "object"
      properties:
        prisonerId:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        surname:
          type: "string"
        pesel:
          type: "string"
        kartaPobytuId:
          type: "string"
        passportId:
          type: "string"
    PrisonerFilter:
      type: "object"
      properties: { }
    ReportDTO:
      type: "object"
      properties:
        reportId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        priorityId:
          type: "integer"
          format: "int32"
        shiftId:
          type: "integer"
          format: "int32"
        segment:
          type: "string"
        blok:
          type: "string"
        description:
          type: "string"
    ReportFilter:
      type: "object"
      properties: { }
    RoleDTO:
      type: "object"
      properties:
        roleId:
          type: "integer"
          format: "int32"
        roleCode:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        adminClass:
          type: "boolean"
        active:
          type: "boolean"
    RoleFilter:
      type: "object"
      properties: { }
    SentenceDTO:
      type: "object"
      properties:
        sentenceId:
          type: "integer"
          format: "int32"
        prisonerId:
          type: "integer"
          format: "int32"
        prisonId:
          type: "integer"
          format: "int32"
        startDate:
          type: "string"
          format: "date"
        endDate:
          type: "string"
          format: "date"
        assignDate:
          type: "string"
          format: "date"
        unassignDate:
          type: "string"
          format: "date"
    SentenceFilter:
      type: "object"
      properties: { }
    ShiftDTO:
      type: "object"
      properties:
        shiftId:
          type: "integer"
          format: "int32"
        startDate:
          type: "string"
          format: "date-time"
        endDate:
          type: "string"
          format: "date-time"
    ShiftFilter:
      type: "object"
      properties: { }
    ApplicationDTO:
      type: "object"
      properties:
        applicationId:
          type: "integer"
          format: "int32"
        prisonerId:
          type: "integer"
          format: "int32"
        additionalInformation:
          type: "string"
        typeOfApplication:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        applyDate:
          type: "string"
          format: "date"
        reviewDate:
          type: "string"
          format: "date"
    ApplicationFilter:
      type: "object"
      properties:
        applicationIdList:
          type: "array"
          items:
            type: "integer"
            format: "int32"
    ApplicationTypeDTO:
      type: "object"
      properties:
        applicationTypeId:
          type: "integer"
          format: "int32"
        description:
          type: "string"
        name:
          type: "string"
    ApplicationTypeFilter:
      type: "object"
      properties: { }
    GrantedAuthority:
      type: "object"
      properties: { }
    CurrentUser:
      type: "object"
      properties:
        jwtToken:
          type: "string"
        id:
          type: "integer"
          format: "int32"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        login:
          type: "string"
        password:
          type: "string"
        enabled:
          type: "boolean"
        locked:
          type: "boolean"
        accountExpired:
          type: "string"
          format: "date"
        passwordExpired:
          type: "string"
          format: "date"
        lastLoginTime:
          type: "string"
          format: "date-time"
        userType:
          type: "integer"
          format: "int32"
        grantedAuthorities:
          type: "array"
          items:
            $ref: "#/components/schemas/GrantedAuthority"
    Credentials:
      type: "object"
      properties:
        userName:
          type: "string"
        password:
          type: "string"
    AuthSession:
      type: "object"
      properties:
        accessToken:
          type: "string"
        expiresIn:
          type: "integer"
          format: "int32"
        refreshToken:
          type: "string"
        refreshExpiresIn:
          type: "integer"
          format: "int32"
        currentUser:
          $ref: "#/components/schemas/CurrentUser"
    SuccessPayload:
      type: "object"
      properties:
        success:
          type: "string"
    RefreshToken:
      type: "object"
      properties:
        refreshToken:
          type: "string"
    RegistrationDTO:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        locationId:
          type: "integer"
          format: "int32"
        firstname:
          type: "string"
        lastname:
          type: "string"
        email:
          type: "string"
        login:
          type: "string"
        password:
          type: "string"
        userType:
          type: "integer"
          format: "int32"
    CategoryDTO:
      type: "object"
      properties:
        categoryId:
          type: "integer"
          format: "int32"
        code:
          type: "string"
        description:
          type: "string"
        helpDescription:
          type: "string"
    CategoryFilter:
      type: "object"
      properties: { }